In XV6 the system will forcibly take control over the CPU when either an exception, interrupt, or a system call. All of these events are referred to as “Traps” in XV6 and are said to cause user process to “Trap” into the kernel.

Interrupts occur when a hardware device generates an interrupt signal. XV6 defines it’s interrupts in the interrupt descriptor table, this table is used to determine which interrupt handler to execute when a given interrupt occurs. When such an event occurs the number specified along with the interrupt call is used to determine the interrupt type and the handler needed for the interrupt that has occured. The operating system then saves the state of the interrupted process and transfers control to the appropriate interrupt handler which then performs the necessary actions according to the device that caused the interrupt such as updating data structures and generating I/O requests, where it then returns control to the original process following the completion of the interrupt request.

System calls are similar to interrupts, with one of the primary differences being that as the name suggests, a system call is something that must be called upon and is not something that can happen at random. System calls provide a means for a user-level process to request a given service from a predefined list of services from the system call interface. Just like hardware interrupts these system calls are implemented as software interrupt instructions, and as such when a process makes a system call it uses an int instruction that matches with a corresponding value in syscalls.h to select an interrupt handler. The operating system's interrupt handler then transfers control to the appropriate system call handler and performs the service required such as reading from or writing to a file and then returns CPU control back to the original process. 

An example of such a call could be write(). When called an interupt is triggered with a number matching that of the write call in syscalls.h. Control of the CPU is then given to the handler corresponding to the write() system call. The handler then performs the requested service, which in this case is to write data to a file given the specified file and the contents to be written as parameters. Finally having completed the call, control of the CPU is returned to the process prior to the interuption and execution is resumed.

